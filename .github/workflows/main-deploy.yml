name: Deploy to AWS ECS

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/server:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/server:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/server:latest
            
            if [ "$(docker ps -aq -f name=server)" ]
            then
              echo "[ spring is running ]"
              docker stop server
              docker rm server
            else
              echo "[ spring is not running ]"
            fi
            
            docker run -d --name server -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/server

  result:
    name: Send notification
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord notification
        if: ${{ job.status }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -X POST -H "Content-Type: application/json" -d '{"content": "✅ : Deployment to AWS ECS was successful!"}' ${{ secrets.DISCORD_WEBHOOK_URL }}
          else
            curl -X POST -H "Content-Type: application/json" -d '{"content": "❌ : Deployment to AWS ECS failed!"}' ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi